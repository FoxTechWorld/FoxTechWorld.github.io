[{"title":"SaaS: A ferramenta certa na hora certa","tags":["programming","development","solo-dev","SaaS","ruby","flutter","go","javascript"],"url":"/2025/09/saas-a-ferramenta-certa-na-hora-certa/","content":"Bem a melhor ferramenta é aquela que resolve seu problema.\nIsso é invariável em todo o mundo da programação.\nNo mundo do SaaS, sendo um desenvolvedor solo, você não deve confiar apenas em si mesmo.\nAdicione Testes, testes, mais testes, enfie testes em tudo que puder e use softwares maduros.\nMas, ao mesmo tempo não deixe seu software parado no tempo.\nAs duas grandes divisões Dentro do mundo de software existem duas grandes divisões frontend e backend\nE uma parte menor que é DevOps.\nEste post, em especifico é sobre frontend e backend.\nAssuma que que DevOps você pode contratar outros SaaS em vez de implementar você mesmo.\nFrontEnd Para o Frontend precisamos atingir o máximo de plataformas sozinho com uma interface moderna possa atingir:\nDesktop Web Mobile Além disso, é preferencial que seguirmos técnicas de design como:\nOffline-First Mobile-First Com isso, temos uma base boa para ter um software que não fica irritante com o tempo.\nNo geral, use Flutter para evitar ter que lidar com diversas plataformas manualmente.\nBackEnd Para começar, precisamos entender do que é importante no backend de um SaaS.\nNada mais importante do que usar um framework maduro.\nE no caso, pessoalmente falando, o melhor que temos é o Ruby On Rails e veja que podemos migrar de Ruby para JRuby garantindo que a aplicação pode escalar se e somente se for necessário.\nAdote testes como dogma literalmente, teste tudo, se tiver erro gere um teste, se tiver um bug teste, se tiver uma vulnerabilidade teste também.\nColoque:\nRack Attack Brakeman Capybara Bullet Rack Mini Profiler Veja que a ideia principal é que as libs do rails são maduras e testadas facilmente acopladas e no geral é muito melhor do que depender de si mesmo que só na cabeça vai querer inventar procedimentos de segurança que vai fazer pagar fortunas em indenizações.\nVide Noticia sobre o Saphoos.\nDevOps Dentro de seu Software as Service.\nVocê quer evitar ao máximo problemas de responsabilidade fiscal.\nEntão a coisa mais inteligente a se fazer é se mover de capex (investimento na própria infra) para opex (contrato de serviços externos).\nUse serviços como paper-trail, use a amazon-web-service \u0026hellip;\nO software continua sendo sua responsabilidade mas, problemas internos de servidores gerenciados por provedores não recaem diretamente sobre você, reduzindo riscos e permitindo focar no desenvolvimento.\nContrate Hackers Ético e faça testes de segurança, corrija brechas periodicamente.\nConclusão No geral, a combinação ideal seria usar um backend em rails e um frontend em flutter.\nPara ter diversas plataformas e um backend sólido, caso precise de algo customizado, use um microsserviço da forma que achar melhor contanto que haja contratos fortes e testes.\nJamais esqueça os testes.\n"},{"title":"Osdev: Até onde dá para usar c++","tags":["osdev","c++","cpp","kernel","linux","windows","macosx"],"url":"/2025/09/osdev-at%C3%A9-onde-d%C3%A1-para-usar-c/","content":"Estou desenvolvendo um kernel chamado FKernel.\nPara uso desktop em código x86_64.\nE lendo sobre algumas linguagens como Rust, C, C++, Zig \u0026hellip;\nDecidi fazer uma combinação de:\nLinguagens de Programação: C C++ Linguagem de montagem: Nasm Obviamente alguns podem estranhar já que eu propositalmente ignorei Rust, e aquelas que são considerados \u0026ldquo;memory-safe\u0026rdquo;.\nPorque não usar linguagens memory-safe? Pro Tip: Não existe linguagem memory-safe em baixo nível. Para programar um kernel ou similar, você vai depender do unsafe então nem tenta.\nSe for para ter que lidar com sintaxes estranhas para programar um kernel, eu prefiro seguir no bom e velho C/C++.\nTambém não quero fazer um overflow de logs de um compilador super-nanny para chegar a um subset daquilo que eu queria no meu código.\nE porque C++? Muito tempo atrás Linus Torvalds havia tentado escrever um kernel com a versão de sua época.\nC++ leads to really, really bad design choices. You invariably start using the STL, boost, and other total and utter crap…\nOk, podemos concordar em algumas partes mas, isso não seria inevitavelmente ruim.\nSim, C++ tem um monte de coisa, mas fugiria do ponto principal que é C++ dá contratos que structs sozinhas dificilmente conseguem.\nPegue um exemplo do SerenityOS\nstatic ErrorOr\u0026lt;NonnullOwnPtr\u0026lt;KBuffer\u0026gt;\u0026gt; try_create_with_size(StringView name, size_t size, Memory::Region::Access access = Memory::Region::Access::ReadWrite, AllocationStrategy strategy = AllocationStrategy::Reserve){ auto rounded_size = TRY(Memory::page_round_up(size)); auto region = TRY(MM.allocate_kernel_region(rounded_size, name, access, strategy)); return TRY(adopt_nonnull_own_or_enomem(new (nothrow) KBuffer { size, move(region) })); } Consegue entender o que esse código faz? Todo esse contrato engloba em poucas linhas\nEssa função try_create_with_size serve para criar um buffer de memória no kernel de um tamanho específico e lidar com possíveis erros de forma segura.\nPara termos o equivalente exato em C garantindo a mesma segurança seria necessária escrever dessa forma.\nint try_create_with_size(const char* name, size_t size, MemoryAccess access, AllocationStrategy strategy, KBuffer** out_buffer) { if (!out_buffer) return -1; size_t rounded_size; int rc = page_round_up(size, \u0026amp;rounded_size); if (rc != 0) return rc; MemoryRegion* region; rc = allocate_kernel_region(rounded_size, name, access, strategy, \u0026amp;region); if (rc != 0) return rc; KBuffer* buffer = malloc(sizeof(KBuffer)); if (!buffer) { free(region-\u0026gt;addr); free(region); return -ENOMEM; } buffer-\u0026gt;size = size; buffer-\u0026gt;region = region; *out_buffer = buffer; return 0; // sucesso } Ok, tivemos uma disparidade no tamanho, mas isso não significa nada no geral.\nMeu ponto defendido é que precisamos fazer muito mais código, que vai ser muito mais performático mas que vai resultar em um resultado muito menos seguro, e muito menos reusável no geral.\nNão ironicamente, muitos empresas incluindo a própria Apple usam o C++ em seus kernels.\nMas não precisa ser o c++ inteiro e sim um subset chamado embedded c++.\nImplementação do IOKit /* * Copyright (c) 1998-2000 Apple Computer, Inc. All rights reserved. * * @APPLE_OSREFERENCE_LICENSE_HEADER_START@ * * This file contains Original Code and/or Modifications of Original Code * as defined in and that are subject to the Apple Public Source License * Version 2.0 (the \u0026#39;License\u0026#39;). You may not use this file except in * compliance with the License. The rights granted to you under the License * may not be used to create, or enable the creation or redistribution of, * unlawful or unlicensed copies of an Apple operating system, or to * circumvent, violate, or enable the circumvention or violation of, any * terms of an Apple operating system software license agreement. * * Please obtain a copy of the License at * http://www.opensource.apple.com/apsl/ and read it before using this file. * * The Original Code and all software distributed under the License are * distributed on an \u0026#39;AS IS\u0026#39; basis, WITHOUT WARRANTY OF ANY KIND, EITHER * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES, * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. * Please see the License for the specific language governing rights and * limitations under the License. * * @APPLE_OSREFERENCE_LICENSE_HEADER_END@ */ #ifndef _IOKIT_IONVRAMCONTROLLER_H #define _IOKIT_IONVRAMCONTROLLER_H #include \u0026lt;IOKit/IOService.h\u0026gt; class IONVRAMController : public IOService { OSDeclareAbstractStructors(IONVRAMController); public: virtual void registerService(IOOptionBits options = 0) APPLE_KEXT_OVERRIDE; virtual void sync(void); virtual IOReturn select(uint32_t bank); virtual IOReturn eraseBank(void); virtual IOReturn read(IOByteCount offset, UInt8 *buffer, IOByteCount length) = 0; virtual IOReturn write(IOByteCount offset, UInt8 *buffer, IOByteCount length) = 0; }; #endif /* !_IOKIT_IONVRAMCONTROLLER_H */ Quem diria.\nSe fossemos falar do C++ antes da versão 17, eu até concordaria mas após a versão 17 muita coisa mudou.\nE veja que o IOKit é implementado na forma Embedded C++.\nMas, e como em tudo há um mas, há em real,o ponto da STL que invariavelmente você vai acabar usando ou não.\nRealmente preciso do STL? No fringir dos ovos há um outro superset de C++ chamado c++ ortodoxo jamais o use, sério.\nUma das soluções que o FKernel e o SerenityOS fazem é criar sua própria STL.\nO SerenityOS com sua Abstraction Kit. E o FKernel com seu LibFK.\nUsar uma STL não é de todo mal, há diversos efeitos, como otimização em cascata.\nGenericos e todo resto.\nE no fim? No fim, depende de você.\nSe você está desenvolvendo um app para desktop.\nEu sugeriria:\nD Go Zig Rust Para baixo nível certamente eu sugeriria:\nB C, C++ D Rust Zig Mas em kernel estou muito mais satisfeito com minha escolha do que usar C puro.\nNão que eu não use C obviamente, por baixo dos panos da LibFK eu implementei uma LibC bem simples com funções que eu teria que usar dentro do FKernel para algumas funções da LibFK.\nMas enfim, se uma linguagem que você prefere usar por algum motivo de design ou simplesmente por ser a que você sabe, simplesmente use.\nDesde que não seja usar algo interpretado para fazer baixo nível, tá valendo tudo.\n"},{"title":"Opinião: Brasil a grande várzea","tags":["opinião","politica","brasil","futuro","passado","esquerda","direita"],"url":"/2025/09/opini%C3%A3o-brasil-a-grande-v%C3%A1rzea/","content":"Até queria fazer um post recomendando mangás, manhwas\u0026hellip; mas, dado os eventos recentes.\nOcorrendo no inferno moderno a.k.a X, resolvi vir para cá reclamar para um cacete.\nJá aviso que vai ter muita generalização aqui, é muito mais fácil juntar tudo do que contar parte por parte separado.\nA grande burrada Politicamente o mundo está um inferno real, não falo de alguns ou outros países mas, de todo mundo globalizado.\nEu já havia detectado alguns traços de que o mundo estava se tornando niilista. Mas, isso está pior do que poderia estar e dessa vez eu atribuo a culpa a amathia.\nSegundo Sócrates, Amathia (a ignorância) é o único mal.\nE não, não estou chamando nenhum espectro de ignorante em si. Mas, a população que está ocupando os espectros estão em condição de fanatismo.\nO que são esquerda e direita? Antes de tudo é bom contextualizar um pouco sobre.\nDurante a revolução francesa (1789 - 1799) a população precisou de juntar na Convenção nacional.\nOs que apoiavam o rei se sentaram a direita do presidente da assembleia, aqueles que defendiam mudanças radicais e nova ordem se sentavam a esquerda.\nNão inesperado, muita coisa mudou daquele tempo para cá. Mas uma caracteristica da revolução se manteve:\nDireita continua sendo sobre manter o status quo, a preservação das tradições e da ordem social existente. Esquerda continua sendo aqueles que lutam pelas mudanças sociais, economicas e/ou politicas. Até aqui, como pudemos ver nada de amoral/imoral ou moral em um lado e outro.\nCapitalismo/Comunismo nem deveriam entrar aqui porque seria anacrônico.\nO fanatismo O ponto é, o certo seriam ambos os lados serem educados uns com outros, nem estou falando de respeito.\nPorém educação. Mas, ambos os lados políticos no mundo inteiro parece que viraram o cú para lua esperando cair uma chuva de pica.\nEles parecem que querem ser os donos da moral.\nOu seja, demonizaram o seu espectro oposto porque segundo eles é o time que mais mata.\nPrimeiramente é um absurdo usar mortes de pessoas como argumento moral sobre politica.\nSe alguém foi assassinado, o assassino é um doente que nem em sociedade deveria estar.\nSem meias palavras até aqui.\nO problema é que hoje em dia estamos olhando o espectro politico da coisa, chorando quando é o nosso, rindo quando é do outro.\nOk! No cú dos outros pimenta é refresco, mas, já pararam para olhar fora do ponto de vista político? não consegue neh?\nÉ trabalho! CARALHO Só porque um personagem político de direita se junta a de esquerda para entregar um projeto ou fazer uma votação na câmara não significa que ele trocou de lado político.\nPode parecer raro mas existe uma coisa chamado convergência de ideias.\nDois lados opostos podem concordar em algo, não sempre.\nMas, podem concordar.\nComo por exemplo, na PEC da blindagem.\nA maioria dos de esquerda e direita votando a favor quando deveriam votar contra.\nE ninguém liga para nada E tu que vai se fuder, principalmente quando tem eleição.\nCandidato do partido A é de esquerda Candidato do partido B é de direita Candidato do partido C é de esquerda Candidato do partido D é de direita\nAi fica definido que os partidos A e D são os que seriam mais votados porém você é a favor do partido C ou B.\nEm vez de votar no partido que concorda com suas ideias vai votar no A ou no D na tentativa de evitar que o partido oposto ganhe.\nVirou rinha de galo nesse caralho?\nHoje em dia a gente chama direita tem diversos Sub-rótulos Ideológicos:\nAgrarismo Anarquismo Democracia cristã Comunismo Conservadorismo Ambientalismo Fascismo Feminismo Política verde Hindutva Islamismo Liberalismo Libertarismo Monarquismo Nacionalismo Populismo Progressismo Radicalismo clássico Republicanismo Social democracia Socialismo Sincretismo Terceira Via E isso quando a gente não olha para as propostas individuais.\nO desespero Enfim, não tenho nenhuma intenção ou motivo para tentar te convencer de algo.\nProvavelmente esse post vai ser esquecido e jogado em um canto mofado.\nTambém não estou defendendo nenhum lado politico.\nMas quero manter um pouco de lúcidez enquanto vejo esse titanic desabando, por favor tragam a banda.\nEnfim, para mim e para o resto do mundo só basta aguardar o terceiro colapso social.\nColapso Social? Ok, antes de terminar esse post vou mostrar um pouco das minhas previsões para o futuro próximo.\nAntes o disclaimer\nToda previsão é um chute, a única forma de acertar 100% é prever depois do ocorrido.\nE outra, não existe previsão de profécia, é chute. Se alguém fala que uma profecia está ocorrendo, ela está errada até se concretizar.\nEnfim, da mesma forma que na economia, eu acredito que exista uma correção na própria globalização. Que por algum acaso começou com a revolução industrial.\nAs guerras mundiais 1ª e 2ª são uma forma de correção que é engatilhado pelo próprio tribalismo.\nVeja que tribalismo não é algo anormal em animais sociais.\nE se resume praticamente no nós contra eles.\nO mundo em si parece novamente estar se dividindo em blocos economicos, e se divergindo cada vez mais. Espero que o próximo colapso não seja outra guerra mundial.\nMas, é mais provável, que ocorra um evento universo 25 não ironicamente no ocidente estamos na fase final da utópia dos ratos.\nEntão, ou entramos em extinção silenciosa, ou entramos em guerra.\nO futuro é medonho.\nEnfim, espero que tenha gostado deste post, muito obrigado.\n"},{"title":"Opinião: Não tenha crianças sem antes pensar nisso","tags":["opinião","educação","educação permissiva","educação positiva","educação tradicional","internet","imediatismo","mundo moderno"],"url":"/2025/09/opini%C3%A3o-n%C3%A3o-tenha-crian%C3%A7as-sem-antes-pensar-nisso/","content":"Salve pessoal, dessa vez decidi sair um pouco do mundo da programação e colocar um pouco de opinião baseada em dados sobre psicologia e antropologia relacionado em como criar crianças.\nInicialmente, eu gostaria de dizer que isso é um post de opinião e que qualquer decisão tomada é exclusivamente baseada na sua decisão como pai. Ou seja, leia isso com uma quantidade saudável de sal.\nSeres Humanos no Geral não são racionais Todo esse post no geral vem com essa máxima.\nIsso não é uma negação da racionalidade e sim que a maioria das decisões tomadas também são instintos, que de mesma forma são condicionados.\nIsso é uma parte importante a se dizer porque, coisas como confiança, hierarquia e \u0026hellip; são formados de duas formas.\nConfiança Durante a formação da capacidade racional e com a capacidade racional.\nNormalmente, a confiança nos pais é formada antes da capacidade de racionalização e a confiança nos amigos é formada após a formação da racionalização.\nIsso nos diz que de alguma forma, na maioria das vezes a confiança nos pais vai ser mais forte.\nAté que essa confiança seja quebrada de alguma forma.\nApós isso, qualquer confiança formada seria a segunda forma de confiança com racionalização.\nA diferença entre ambos é o nível de confiança, um é a confiança incondicional enquanto o outro é a confiança com cautela.\nHierarquia O mais importante de se tornar pai, é se tornar o topo da hierarquia.\nNa visão de que você vai guiar uma versão menor de si mesmo a conseguir sobreviver nesse mundo.\nIsso também significa que todos os problemas vão em sua direção, os seus ou o de seu filho.\nE como já dito previamente, muitas das coisas da paternidade são desenvolvidos na primeira infância, isso também diz sobre a hierarquia.\nA quem os problemas devem ir quando aparecerem.\nE é uma discussão muito importante a se resolver.\nMuitas vezes, mesmo na primeira infância essa hierarquia vai ser desafiada.\nO pai pode dizer não, enquanto a cria vai na mãe fazer a mesma pergunta para ver se a resposta é diferente.\nEsse tipo de coisa mostra ao filho, quem tem a resposta mais mansa e a quem ele deve ir para ter o que quer.\nComo isso se relaciona a educação Escapando um pouco da discussão qual a melhor.\nOpinião pessoal: Prefiro a tradicional\nTodas se relacionam com o nível de autoridade que o pai tem em relação a seu filho.\nNa tradicional, o pai assume papel mais autoritário em relação ao filho.\nNa positiva, o pai assume um papel mais manipulativo em relação ao filho.\nDando uma dualidade de opções e pedindo pro filho escolher qual lhe agrada melhor.\nExemplo Você prefere guardar os brinquedos e tomar banho ou tomar banho e ir dormir?\nJá a permissiva é um nome mais bonito para indulgente.\nNo geral, a educação permissiva parte da premissa que você vai dar total autonomia para um incapaz se virar, acatando todas as ordens e regras dele.\nPorque eu prefiro a educação tradicional No simples e no grosso, porque é mais simples.\nSó que não posso afirmar que é exatamente a educação tradicional também.\nÉ a educação tradicional quando aplicada a alguém que tem 10 anos ou mais. Menos que isso, a abordagem tem que ser mudada.\nE o que mudamos? 1º Frustre muito a criança\nÉ meio cruel mas, com isso vem a oportunidade de trabalhar a educação e o controle emocional.\nGaranto que vai poupar grana quando o salário chegar e você precisar ir com ela no supermercado.\nOpcional: Você não tem a necessidade real de fazer isso, se quiser manter a criança em casa. Este tipo de aprendizado a vida vai ensinar de qualquer forma.\nNada de telas até 8/10 anos Esse entra em contato direto com o 1º.\nMuitos dos problemas da paternidade moderno é calar a frustração com as telas em vídeos que são muito mais informativos do que os programas de antigamente.\nFluxos mais rápidos, dialogos complexos e informação audiovisual muito mais animada.\nAo tirar a tela, você volta com o dobro da frustração inicial e isso vai acarretar numa série de problemas como o próprio imediatismo.\n3º Celulares são importantes, compre um para seu filho\nNão tem como fugir disso, celulares ainda são importantes e seu filho desde pequeno tem que saber usar um.\nMas você como pai se esquece de uma coisa, você não precisa entregar um smartphone.\nUm bom e velho dumbphone com tecla e de preferência sem jogos ou outros distrativos é uma recomendação muito melhor do que um Samsung Galaxy S24, Google Z-Fold, Iphone \u0026hellip; etc.\nA menor idade já passou, o que fazer durante a pré-adolecência/adolecência Comece respirando fundo, essa é a melhor/pior idade para você e para seu filho, sem sombras de dúvidas.\nEntão, vamos começar com o liberar algumas coisas.\nPrimeiro, liberar seu filho para ter um celular decente é um bom começo mas, não faça isso por fazer ou para comemorar algo.\nFaça na forma de uma recompensa por ele resolver um problema que você não pediu mas, mesmo assim ele decidiu ajudar.\nNão significa dar o top tier, nem um pro, nem mesmo algo caro.\nTalvez 1 ou 2 gerações anteriores de preferência.\nAlém disso, siga uma progressão na lista de coisas a se fazer dentro de casa.\nComo por exemplo, ajudar a limpar e tudo mais. Não tudo de uma vez, uma responsabilidade por vez.\nE outra, acompanhar seu filho com o family link é crucial.\nE apesar da maioria das críticas que o app tem. É super necessário, que você acompanhe o que seu filho faz online.\nApesar de que, tudo vai depender da sua capacidade como pai não ser super-protetor.\nVocê como pai que já conhece o mundo e sabe quão pobre ele é, deve deixar seu filho rolar um pouquinho no barro, se sujar bastante e tentar se lavar.\nEste é a verdadeira paternidade, criar seu filho para que no momento de dificuldade ele ter certeza que pode procura - lo.\nAssim dito, o ponto mais importante é você como pai deve enforçar algumas coisas:\nLeitura Esportes Artes Marciais Hobbies Religião é meio complicado, apesar de ser cristão e católico eu não acredito em batizar meu filho até pelo menos ele por conta própria decidir seguir minha fé ou não.\nNão significa não leva - lo a igreja mas, respeitar a decisão de fé do mesmo. Se, e somente se ele decidir que quer seguir minha fé ai sim, eu acredito que o batismo deve ser feito.\nE antes de qualquer dúvida razoável, eu já afirmo de primeira.\nO Batismo é o sacramento mais importante da igreja cristã. Valendo para os ortodoxos, protestantes ou os católicos em geral.\nSeria muito desrespeitoso da minha parte, colocar meu filho a ser batizado sem sua escolha. Para definir sua fé antes que de sua própria vontade, ele também a expresse.\nEscolaridade Não tem muito o que fazer aqui, a educação é a parte mais importante do desenvolvimento de uma criança e adolescente.\nO problema é quando correlacionamos a educação a uma motivação extrinseca e logo ela perde o sentido.\nSeria interessante pelo menos no mínimo, você como pai, mostrar os pontos mais interessantes da educação.\nPara ele se tornar um nerd clássico, um verdadeiro nérdico.\nNão vou falar que é porque a educação é importante, principalmente não no Brasil.\nMas, ela é um recurso de conhecimento que abre portas.\nQualquer desejo que um pessoa tenha, pode ser resolvido com o conhecimento, que vai ser adquirido com a educação.\nSeja formal, seja autodidata.\nE tem mais, por mais que a educação formal no Brasil seja sucateada, ela ainda te dá uma coisa que nenhuma outra te dá.\nUm papel dizendo aprovado.\nEsse papel reduz a dificuldade de ganhar um emprego com salário razoável, então vale a pena tentar.\nResponsabilidade Como neste ponto, já estamos falando de adolescentes. podemos dizer que a partir daqui, seu filho já pode começar a ser responsabilizado pelos atos sociais ou pela bagunça feita.\nFaça um tipo de sistema penal mais leve com possíveis consequências em atos não desejáveis.\nA ideia é não ser duro mas ser justo como na vida real.\nAlém disso, ensinar o que \u0026ldquo;direito ao contrário\u0026rdquo; e o \u0026ldquo;direito a defesa\u0026rdquo; aparece aqui.\nInteressante seria \u0026ldquo;simular um julgamento\u0026rdquo;.\nConclusão Esses são alguns dos meus pensamentos sobre filhos, e como criar eles, coisas a mais, coisas a menos, é sempre importante ter esse tipo de coisa em mente.\nObviamente cada criação é única. E a que você vai oferecer depende exatamente daquilo que você quer passar.\nBibliografia Rápido e Devagar: Duas formas de Pensar Teoria do Apego Disciplina Sem Drama "},{"title":"Algoritmos em Grafos: Busca em Largura e Busca em profundidade","tags":["Algoritmos","Estrutura de Dados","Grafos","Algoritmos de Busca","Busca em Largura","Busca em Profundidade","Teoria dos Grafos"],"url":"/2025/09/algoritmos-em-grafos-busca-em-largura-e-busca-em-profundidade/","content":"O que são Grafos? Grafos são um ramo da matemática que estuda relações entre objetos pertencentes a um determinado conjunto.\nVocê pode pensar por exemplo que $${a, b}$$ é um grafo que leva de a para b.\nHistoricamente, foi Leonhard Euler, mesmo criador da identidade de Euler.\n$$E^{i\\pi} + 1 = 0$$\nPublicou em 1736 um artigo sobre o problema das sete pontes de Königsberg.\nE este foi considerado o ponto de partida da teoria dos grafos.\nOnde grafos são usados? Dentro da computação em todo lugar diretamente ou indiretamente.\nRedes Neurais Estrutura de árvores Rede de computadores Computação Gráfica Redes Sociais Se precisa de coordenação provavelmente vai ter um grafo incluso.\nFica ainda mais interessante porque Linguagens Formais e Automatos.\nFundamental para a construções de linguagens (programação, regular, marcação).\nTambém usa grafos como estrutura de representação para automatos e diagramas de transição\nAlgoritmos de Busca Como um grafo é formado por relações, contendo ou não um direcionamento.\nÉ necessário sob algum critério percorrer esse grafo.\nE para isso temos um problema essencial que precisa ser resolvido.\nQual critério? Normalmente ou estamos trabalhando com grafos esparsos ou grafos densos.\nSendo grafos esparsos aqueles que tem poucas arestas em relação ao número de vértices.\nE grafos densos aqueles que tem muitas arestas.\nEssa caracteristica influência diretamente a escolha do algoritmo de busca mais eficiente.\nOs dois algoritmos mais clássicos para essa busca são:\n(BFS - Breadth First Search): Busca em Largura. (DFS - Depth First Search): Busca em profundidade. Algoritmos Busca em Largura (BFS) O algoritmo de busca em largura explora nível por nível.\nOu seja se pensarmos em uma árvore.\nEle verificaria primeiros os vizinhos da raiz.\nDepois os vizinhos dos vizinhos da raiz e por assim vai.\nPara fazer isso a gente utiliza uma estrutura de dados fila/queue.\nPropriedades da busca em largura Se existir uma solução, este algoritmo consegue encontrar.\nÓtimo em arestas unitárias vai encontrar o caminho mais curto em termo de números de passos.\nComplexidade:\nVai ter o tempo de percorrer $$O(V + E)$$ ou seja o tempo para percorrer todos os vertices e arestas.\nEspaço: $$O(V)$$ porque precisa armazenar a fila e o conjunto de visitados.\nLógica passo a passo Colocamos um nó na fila, e marcamos como visitado. Enquanto a fila não estiver vazia: Retiramos o primeiro elemento. Visitamos todos os vizinhos não visitados do nó. Adicionamos esses vizinhos a fila e marcamos como visitados. Busca em Profundidade A busca em profundidade em comparação explora todo um ramo do grafo até o fim antes de voltar e explorar outros ramos.\nAo contrário da busca em largura, aqui usamos pilha/stack (Last In, First Out).\nPropriedades da busca em profundidade Completo? Em grafos finitos mas, não garante o caminho mais curto em grafos não ponderados.\nÓtimo? Não, não é adequado quando você precisa do menor número de arestas.\nComplexidade:\nTempo: $$O(V + E)$$ Espaço: $$O(V)$$ Risco Prático em recursão pode estourar a pilha em grafos muito profundos, prefira uma versão iterativa.\nLógica passo a passo Marca o nó inicial como visitado e entre nele. Para cada vizinho não visitado, repita o processo. Quando o nó não tem vizinhos não visitados, realize um backtrack. Continue até visitar todos os nós alcançáveis. Conclusão Não existe um algoritmo universalmente “melhor”: tudo depende do objetivo.\nBFS (Busca em Largura):\nGarante o menor caminho em grafos não ponderados.\nMais indicado quando o problema exige a solução mais curta.\nDFS (Busca em Profundidade):\nÚtil para exploração completa, detecção de ciclos, ordenação topológica e backtracking.\nMais indicado quando queremos percorrer toda a estrutura ou analisar propriedades do grafo.\nAmbos têm mesma complexidade assintótica $$ O(V+E)$$ mas, se aplicam a cenários distintos.\nE devem ser tratados com cautela para não escolher a pior opção por puro achismo.\nAdemas, espero que tenham gostado do post e valeu\n"},{"title":"Bem Vindos ao FoxTechWorld!","tags":["Bem Vindos","First Post","New Blog","My First Blog"],"url":"/2025/09/bem-vindos-ao-foxtechworld/","content":"Bem vindos ao FoxTechWorld Este é um pequeno blog feito para distribuir conteúdo nérdico. Através da Grande Rede Mundial de computadores.\nQuem sou eu? Meu nome é Arthur tenho no momento da criação deste post 23 anos.\nSou um estudante de Ciências da Computação na Universidade Federal de Lavras.\nTenho curiosidade em diversos assuntos, então você provavelmente vai me ver falando de assuntos:\nOtaku Geek Nerd Gamer Sobre:\nEletrônica Economia Politica \u0026hellip; e por ai vai.\nEnfim, bem vindos a este novo começo.\n"}]